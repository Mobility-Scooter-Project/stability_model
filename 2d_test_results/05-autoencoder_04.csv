,batchsize,timesteps,optimizer,loss,metrics,layer1,preprocess,avg_epochs,avg_loss,avg_valid_loss,avg_test_loss_0,avg_test_loss_1
0,40,16,adam,mse,mse,{'units': 1},No Change,18.333333333333332,0.005255721043795347,0.005822522876163323,0.018766991173227627,0.010977754679818949
1,40,16,adam,mse,mse,{'units': 2},No Change,23.666666666666668,0.003730499496062597,0.004573389422148466,0.005600350443273783,0.0032520825819422803
2,40,16,adam,mse,mse,{'units': 3},No Change,31.0,0.0027478088159114122,0.003011647999907533,0.004244657388577859,0.0024685595029344163
3,40,16,adam,mse,mse,{'units': 4},No Change,29.0,0.00206825432057182,0.0023882537304113307,0.0032939359856148562,0.0019324924408768613
4,40,16,adam,mse,mse,{'units': 5},No Change,30.333333333333332,0.0013683210515106718,0.0017189922121663888,0.0024391391780227423,0.0013180253251145284

from keras import Input, layers, Model

TIMESTEPS = 16
VECTOR_SIZE = 10

class Encoder_Decoder:
    def __init__(self, number_of_features):
        inputs = Input(shape=(TIMESTEPS, number_of_features))
        lstm = layers.LSTM(VECTOR_SIZE, return_sequences=True)(inputs)
        outputs = layers.Conv1DTranspose(number_of_features, 3, padding="same")(lstm)
        self.model = Model(inputs=inputs, outputs=outputs)

    def target_function(self, data):
        x, y = data
        return x

OPTIONS = {
    "batchsize": [40],
    "timesteps": [TIMESTEPS],
    "optimizer": ["adam"],
    "loss": ['mse'],
    "metrics": ['mse'],
    "layer1": [{"units": i} for i in range(1, 6)],
}
,batchsize,timesteps,optimizer,loss,metrics,layer2,preprocess,avg_epochs,avg_loss,avg_valid_loss,avg_test_loss_0,avg_test_loss_1
0,40,16,adam,mse,mse,{'units': 3},No Change,40.0,0.0015251838291684787,0.0021042857939998307,0.0034509689236680665,0.0019155409730349977
1,40,16,adam,mse,mse,{'units': 6},No Change,40.0,0.0009614038087117175,0.0013665450193608801,0.002000672393478453,0.0011670564611752827
2,40,16,adam,mse,mse,{'units': 9},No Change,39.666666666666664,0.0005983501517524322,0.0008340675267390907,0.0010866490192711353,0.0006202135312681397

'''
lstm -> lstm -> lstm
'''
from keras import Input, layers, Model

TIMESTEPS = 16
VECTOR_SIZE = 3
class Encoder_Decoder:
    def __init__(self, number_of_features):
        inputs = Input(shape=(TIMESTEPS, number_of_features))
        lstm = layers.LSTM(64, return_sequences=True)(inputs)
        lstm = layers.LSTM(VECTOR_SIZE, return_sequences=True)(lstm)
        lstm = layers.LSTM(64, return_sequences=True)(lstm)
        outputs = layers.LSTM(number_of_features, return_sequences=True)(lstm)
        self.model = Model(inputs=inputs, outputs=outputs)

    def target_function(self, data):
        x, y = data
        return x

OPTIONS = {
    "batchsize": [40],
    "timesteps": [TIMESTEPS],
    "optimizer": ["adam"],
    "loss": ['mse'],
    "metrics": ['mse'],
    "layer2": [{"units": i*3} for i in range(1, 4)],
}